<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>给Hexo-Buttetfly主题使用CDN服务</title>
    <url>/butterfly-cdn.html</url>
    <content><![CDATA[<p>由于Jsdelivr的ICP备案已掉，butterfly博客的静态文件加速基本上很慢了，所以得寻找一个可以替代的CDN服务。</p>
<h1 id="推荐使用"><a href="#推荐使用" class="headerlink" title="推荐使用"></a>推荐使用</h1><h2 id="Source-Global-CDN服务"><a href="#Source-Global-CDN服务" class="headerlink" title="Source Global CDN服务"></a>Source Global CDN服务</h2><p>Source Global CDN是Ahdark大佬制作的公共的CDN服务，既稳定还快速。<br>Source Global CDN官网:<a href="https://www.sourcegcdn.com/">https://www.sourcegcdn.com/</a><br>将主题配置文件中最后的CDN配置修改为</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">CDN:</span></span><br><span class="line">  <span class="comment"># main</span></span><br><span class="line">  <span class="attr">main_css:</span> <span class="string">/css/index.css</span></span><br><span class="line">  <span class="attr">jquery:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/jquery/3.6.0/jquery.js</span></span><br><span class="line">  <span class="attr">main:</span> <span class="string">/js/main.js</span></span><br><span class="line">  <span class="attr">utils:</span> <span class="string">/js/utils.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># pjax</span></span><br><span class="line">  <span class="attr">pjax:</span> <span class="string">https://npm.sourcegcdn.com/pjax@0.2.8/pjax.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># comments</span></span><br><span class="line">  <span class="attr">gitalk:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/gitalk/1.7.2/gitalk.js</span></span><br><span class="line">  <span class="attr">gitalk_css:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/gitalk/1.7.2/gitalk.css</span></span><br><span class="line">  <span class="attr">valine:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/valine/1.4.16/Valine.min.js</span></span><br><span class="line">  <span class="attr">disqusjs:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/disqusjs/1.3.0/disqus.js</span></span><br><span class="line">  <span class="attr">disqusjs_css:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/disqusjs/1.3.0/disqusjs.css</span></span><br><span class="line">  <span class="attr">utterances:</span> <span class="string">https://utteranc.es/client.js</span></span><br><span class="line">  <span class="attr">twikoo:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/twikoo/1.5.0/twikoo.all.min.js</span></span><br><span class="line">  <span class="attr">waline:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/waline/1.6.0/Waline.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># share</span></span><br><span class="line">  <span class="attr">addtoany:</span> <span class="string">https://static.addtoany.com/menu/page.js</span></span><br><span class="line">  <span class="attr">sharejs:</span> <span class="string">https://npm.sourcegcdn.com/social-share.js@1.0.16/dist/js/social-share.js</span></span><br><span class="line">  <span class="attr">sharejs_css:</span> <span class="string">https://npm.sourcegcdn.com/social-share.js@1.0.16/dist/css/share.css</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># search</span></span><br><span class="line">  <span class="attr">local_search:</span> <span class="string">/js/search/local-search.js</span></span><br><span class="line">  <span class="attr">algolia_js:</span> <span class="string">/js/search/algolia.js</span></span><br><span class="line">  <span class="attr">algolia_search:</span> <span class="string">https://npm.sourcegcdn.com/instantsearch.js@2.10.5/dist/instantsearch.js</span></span><br><span class="line">  <span class="attr">algolia_search_css:</span> <span class="string">https://npm.sourcegcdn.com/instantsearch.js@2.10.5/dist/instantsearch.css</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># math</span></span><br><span class="line">  <span class="attr">mathjax:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/mathjax/3.2.0/es5/tex-mml-chtml.min.js</span></span><br><span class="line">  <span class="attr">katex:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/KaTeX/0.15.3/katex.css</span></span><br><span class="line">  <span class="attr">katex_copytex:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/KaTeX/0.15.3/contrib/copy-tex.js</span></span><br><span class="line">  <span class="attr">katex_copytex_css:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/KaTeX/0.15.3/contrib/copy-tex.css</span></span><br><span class="line">  <span class="attr">mermaid:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/mermaid/8.14.0/mermaid.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># count</span></span><br><span class="line">  <span class="attr">busuanzi:</span> <span class="string">///busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># background effect</span></span><br><span class="line">  <span class="attr">canvas_ribbon:</span> <span class="string">https://npm.sourcegcdn.com/butterfly-extsrc@1/dist/canvas-ribbon.js</span></span><br><span class="line">  <span class="attr">canvas_fluttering_ribbon:</span> <span class="string">https://npm.sourcegcdn.com/butterfly-extsrc@1/dist/canvas-fluttering-ribbon.js</span></span><br><span class="line">  <span class="attr">canvas_nest:</span> <span class="string">https://npm.sourcegcdn.com/butterfly-extsrc@1/dist/canvas-nest.js</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/vanilla-lazyload/17.3.1/lazyload.iife.js</span></span><br><span class="line">  <span class="attr">instantpage:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/instant.page/5.1.0/instantpage.js</span></span><br><span class="line">  <span class="attr">typed:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/typed.js/2.0.12/typed.js</span></span><br><span class="line">  <span class="attr">pangu:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/pangu/4.0.7/pangu.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># photo</span></span><br><span class="line">  <span class="attr">fancybox_css:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/fancybox/3.5.7/jquery.fancybox.css</span></span><br><span class="line">  <span class="attr">fancybox:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/fancybox/3.5.7/jquery.fancybox.js</span></span><br><span class="line">  <span class="attr">medium_zoom:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/medium-zoom/1.0.6/medium-zoom.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># snackbar</span></span><br><span class="line">  <span class="attr">snackbar_css:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/node-snackbar/0.1.16/snackbar.css</span></span><br><span class="line">  <span class="attr">snackbar:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/node-snackbar/0.1.16/snackbar.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># effect</span></span><br><span class="line">  <span class="attr">activate_power_mode:</span> <span class="string">https://npm.sourcegcdn.com/butterfly-extsrc@1/dist/activate-power-mode.js</span></span><br><span class="line">  <span class="attr">fireworks:</span> <span class="string">https://npm.sourcegcdn.com/butterfly-extsrc@1/dist/fireworks.js</span></span><br><span class="line">  <span class="attr">click_heart:</span> <span class="string">https://npm.sourcegcdn.com/butterfly-extsrc@1/dist/click-heart.min.js</span></span><br><span class="line">  <span class="attr">ClickShowText:</span> <span class="string">https://npm.sourcegcdn.com/butterfly-extsrc@1/dist/click-show-text.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># fontawesome</span></span><br><span class="line">  <span class="attr">fontawesome:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/font-awesome/6.1.0/css/all.min.css</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Conversion between Traditional and Simplified Chinese</span></span><br><span class="line">  <span class="attr">translate:</span> <span class="string">/js/tw_cn.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># justifiedGallery</span></span><br><span class="line">  <span class="attr">justifiedGallery_js:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/justifiedGallery/3.8.1/js/jquery.justifiedGallery.js</span></span><br><span class="line">  <span class="attr">justifiedGallery_css:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/justifiedGallery/3.8.1/css/justifiedGallery.css</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># aplayer</span></span><br><span class="line">  <span class="attr">aplayer_css:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/aplayer/1.10.1/APlayer.min.css</span></span><br><span class="line">  <span class="attr">aplayer_js:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/aplayer/1.10.1/APlayer.min.js</span></span><br><span class="line">  <span class="attr">meting_js:</span> <span class="string">https://cdn.jsdelivr.net/gh/metowolf/MetingJS@1.2/dist/Meting.min.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Prism.js</span></span><br><span class="line">  <span class="attr">prismjs_js:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/prism/1.27.0/prism.js</span></span><br><span class="line">  <span class="attr">prismjs_lineNumber_js:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/prism/1.27.0//plugins/line-numbers/prism-line-numbers.js</span></span><br><span class="line">  <span class="attr">prismjs_autoloader:</span> <span class="string">https://cdnjs.sourcegcdn.com/ajax/libs/prism/1.27.0/plugins/autoloader/prism-autoloader.js</span></span><br></pre></td></tr></table></figure>

<h2 id="图床使用"><a href="#图床使用" class="headerlink" title="图床使用"></a>图床使用</h2><p>这里还是极其力推Ahdark大佬制作的<code>Alphapic</code>图床，该图床基于阿里云OSS制作，速度极快。<br>Alphapic官网:<a href="https://www.alphapic.org.cn/">https://www.alphapic.org.cn/</a><br>使用的方式非常简单，进入官网，注册Alphapic后就可以上传到图床了，可以直接获取Markdown&#x2F;URL链接，每人默认有5GB存储，用完可以找Ahdark增加空间。</p>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>butterfly</tag>
        <tag>CDNJS镜像</tag>
        <tag>NPM镜像</tag>
        <tag>网站提速</tag>
      </tags>
  </entry>
  <entry>
    <title>Cloudflare官方免费CNAME接入及自选IP教程</title>
    <url>/cloudflare-cname.html</url>
    <content><![CDATA[<p>自2021年年末后，Cloudflare禁用了使用 <code>API_KEY</code>自定义CNAME接入 <code>Partner</code>的方式，自选节点IP成为了历史。</p>
<p>真的没有办法自选IP了</p>
<p>吗?</p>
<p>当然是有的，而且是Cloudflare官方提供的CNAME接入，即 <code>Cloudflare for SaaS</code>，我们依旧可以通过该方式来自定义IP节点，并且共享页面规则和WAF防火墙规则。</p>
<p>下面开始操作。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>俗话说:“工欲善其事，必先利其器”，我们需要提前准备好这些东东。</p>
<ul>
<li>Cloudflare 账户 一枚</li>
<li>域名 两个(允许免费的Freenom域名)</li>
<li>一个支持分线解析的DNS解析平台账号</li>
</ul>
<p>以及</p>
<ul>
<li>外币信用卡(允许0额度卡和虚拟信用卡) 一张 <code>(不收取任何费用)</code></li>
</ul>
<p>或者</p>
<ul>
<li>Paypal账号一个</li>
</ul>
<h2 id="Cloudflare-操作篇"><a href="#Cloudflare-操作篇" class="headerlink" title="Cloudflare 操作篇"></a>Cloudflare 操作篇</h2><p>1.打开 <code>Cloudflare官网</code>，登录&#x2F;注册账号，添加好你的网站域名并修改 <code>NameServer</code>使其在Cloudflare保持 <code>Active</code>状态。(注意:该域名并不是你访问的域名，而是你通过CNAME接入的地址，所以，你可以直接放心大胆的使用 <code>Freenom</code>域名!</p>
<p><img src="https://alpha-q3.sourcegcdn.com/2022/08/05/4Co7kmYq.jpg" alt="Cloudfalre接入域名" title="如图，已成功接入域名" loading="lazy"></p>
<p>接入完成后我们直接打开账户的 <code>付款方式</code>，点击 <code>用户头像</code>，点击 <code>账单</code>-<code>付款信息</code>，在此添加Paypal或信用卡。</p>
<p>接着订购 <code>CloudFlare for SaaS</code>，进入你的域名，按下图所示操作订购服务，可以看到100个域名的免费额度。</p>
<p><img src="https://alpha-q3.sourcegcdn.com/2022/08/05/Yd8pDdT3.jpg" alt="购买SaaS" loading="lazy"></p>
<p>接下来，就是确定源站了。</p>
<p>添加一个DNS记录，可以是任何记录(A,CNAME,…)。记录名建议为 <code>origin</code>，然后在自定义主机名页面中添加 <code>origin.&lt;YOUR_DOMAIN&gt;</code>，在底下添加你的访问域名，例如 <code>www.example.com</code>。</p>
<p><img src="https://alpha-q3.sourcegcdn.com/2022/08/05/cnR6Dxmv.png" alt="添加回退源" loading="lazy"></p>
<p>至此，你已完成了Cloudflare的操作。</p>
<h2 id="分线解析DNS-操作"><a href="#分线解析DNS-操作" class="headerlink" title="分线解析DNS 操作"></a>分线解析DNS 操作</h2><p>登录支持分线解析的DNS控制台，这里以 <code>DNSPOD</code>为例，添加你的域名，并修改 <code>NameServer</code>，使其变为 <code>正常解析</code>状态。</p>
<p>添加一个CNAME解析到 <code>origin.&lt;YOUR_DOMAIN&gt;</code>，然后添加Cloudflare证书需要添加的记录。</p>
<p><img src="https://alpha-q3.sourcegcdn.com/2022/08/05/OGUDjNmj.jpg" alt="添加证书记录" loading="lazy"></p>
<p>如有记录冲突请自行暂停和删除部分解析。</p>
<p>待证书状态变为有效后就可以自选IP了。</p>
<p>例如将 <code>www.example.com</code>的电信运营商解析到 <code>1.1.1.1</code>，就可以添加电信运营商的A记录到 <code>1.1.1.1</code>。</p>
<p>如下图所示，添加你筛选出的最佳IP:</p>
<p><img src="https://alpha-q3.sourcegcdn.com/2022/08/05/SyTfud4Q.png" alt="添加最佳IP" loading="lazy"></p>
<p>然后，访问你的域名，如果能访问的话，恭喜你成功了。</p>
<p>有什么地方看不懂可以评论区留言哦😊</p>
<p>本文参考自<a href="https://luotianyi.vc/6185.html">Luminous&#39; Home-【CloudFlare】官方免费CNAME接入教程</a>。</p>
]]></content>
      <categories>
        <category>技术教程</category>
        <category>免费资源</category>
      </categories>
      <tags>
        <tag>Cloudflare</tag>
        <tag>免费CDN</tag>
        <tag>CNAME接入</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次Cloudreve的简单搭建</title>
    <url>/cloudreve-deploy.html</url>
    <content><![CDATA[<p>本篇教程仅记录<code>最基础</code>的Cloudreve部署方式，仅供各位小白参考，大佬勿喷。</p>
<p>测试环境:</p>
<p>Azure  1CPU  1GB  30GB UBUNTU AMD64</p>
<h2 id="Cloudreve程序部署"><a href="#Cloudreve程序部署" class="headerlink" title="Cloudreve程序部署"></a>Cloudreve程序部署</h2><p>通过SSH登录到服务器，更新软件包，建立Cloudreve文件夹并下载Cloudreve程序。</p>
<p>本文直接使用<code>ROOT</code>用户操作。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br><span class="line">apt update &amp;&amp; apt upgrade</span><br><span class="line">mkdir cloudreve &amp;&amp; cd cloudreve</span><br><span class="line">wget https://github.com/cloudreve/Cloudreve/releases/download/3.5.3/cloudreve_3.5.3_linux_amd64.tar.gz</span><br><span class="line">tar -zxvf cloudreve_3.5.3_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>

<p>开始部署Cloudreve主程序，现在并不需要记住密码。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x ./cloudreve</span><br><span class="line">./cloudreve</span><br></pre></td></tr></table></figure>

<p>按<code>Ctrl</code>+<code>C</code>退出后，开始进行数据库的部署。</p>
<h2 id="数据库连接和SSL"><a href="#数据库连接和SSL" class="headerlink" title="数据库连接和SSL"></a>数据库连接和SSL</h2><p>为了Cloudreve的性能和稳定性，建议使用RDS云数据库对源站进行站库分离，你也可以自行安装<code>MySql</code>数据库连接。</p>
<p>修改Cloudreve配置文件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi conf.ini</span><br></pre></td></tr></table></figure>

<p>代码参考:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 运行模式</span><br><span class="line">Mode = master</span><br><span class="line">; 监听端口</span><br><span class="line">Listen = :5000</span><br><span class="line">; 是否开启 Debug</span><br><span class="line">Debug = false</span><br><span class="line">; Session 密钥, 一般在首次启动时自动生成</span><br><span class="line">SessionSecret = 23333</span><br><span class="line">; Hash 加盐, 一般在首次启动时自动生成</span><br><span class="line">HashIDSalt = something really hard to guss</span><br><span class="line"></span><br><span class="line">; SSL 相关</span><br><span class="line">[SSL]</span><br><span class="line">; SSL 监听端口</span><br><span class="line">Listen = :443</span><br><span class="line">; 证书路径</span><br><span class="line">CertPath = /root/cloudreve/ssl/fullchain.pem</span><br><span class="line">; 私钥路径</span><br><span class="line">KeyPath = /root/cloudreve/ssl/privkey.pem</span><br><span class="line"></span><br><span class="line">; 数据库相关，如果你只想使用内置的 SQLite数据库，这一部分直接删去即可</span><br><span class="line">[Database]</span><br><span class="line">; 数据库类型，目前支持sqlite/mysql/mssql/postgres</span><br><span class="line">Type = mysql</span><br><span class="line">; MySQL 端口</span><br><span class="line">Port = 3306</span><br><span class="line">; 用户名</span><br><span class="line">User = root</span><br><span class="line">; 密码</span><br><span class="line">Password = root</span><br><span class="line">; 数据库地址</span><br><span class="line">Host = 127.0.0.1</span><br><span class="line">; 数据库名称</span><br><span class="line">Name = v3</span><br><span class="line">; 数据表前缀</span><br><span class="line">TablePrefix = cd_</span><br><span class="line">; 字符集</span><br><span class="line">Charset = utf8</span><br><span class="line"></span><br><span class="line">; 跨域配置</span><br><span class="line">[CORS]</span><br><span class="line">AllowOrigins = *</span><br><span class="line">AllowMethods = OPTIONS,GET,POST</span><br><span class="line">AllowHeaders = *</span><br><span class="line">AllowCredentials = false</span><br></pre></td></tr></table></figure>

<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>为了使用的方便，这里使用<code>caddy</code>进行反向代理。</p>
<p>安装Caddy</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https &amp;&amp;</span><br><span class="line">curl -1sLf &#x27;https://dl.cloudsmith.io/public/caddy/stable/gpg.key&#x27; | sudo tee /etc/apt/trusted.gpg.d/caddy-stable.asc &amp;&amp;</span><br><span class="line">curl -1sLf &#x27;https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt&#x27; | sudo tee /etc/apt/sources.list.d/caddy-stable.list &amp;&amp;</span><br><span class="line">sudo apt update &amp;&amp; sudo apt install caddy</span><br></pre></td></tr></table></figure>

<p>编辑<code>Caddyfile</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/caddy/Caddyfile</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">example.com &#123;</span><br><span class="line">         tls i@example.com</span><br><span class="line">         encode gzip</span><br><span class="line">         reverse_proxy localhost:5212</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="进程守护"><a href="#进程守护" class="headerlink" title="进程守护"></a>进程守护</h2><p>建议使用<code>Systemd</code>进行进程守护。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano /usr/lib/systemd/system/cloudreve.service</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Cloudreve</span><br><span class="line">Documentation=https://docs.cloudreve.org</span><br><span class="line">After=network.target</span><br><span class="line">After=mysqld.service</span><br><span class="line">Wants=network.target</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/cloudreve</span><br><span class="line">ExecStart=/cloudreve/cloudreve</span><br><span class="line">Restart=on-abnormal</span><br><span class="line">RestartSec=5s</span><br><span class="line">KillMode=mixed</span><br><span class="line"> </span><br><span class="line">StandardOutput=null</span><br><span class="line">StandardError=syslog</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>开启进程守护</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新配置</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">systemctl start cloudreve</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置开机启动</span></span><br><span class="line">systemctl enable cloudreve</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止服务</span></span><br><span class="line">systemctl stop cloudreve</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启服务</span></span><br><span class="line">systemctl restart cloudreve</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看状态</span></span><br><span class="line">systemctl status cloudreve</span><br></pre></td></tr></table></figure>

<p>最后，享受你的Cloudreve网盘吧。</p>
]]></content>
      <categories>
        <category>技术教程</category>
        <category>网站部署</category>
      </categories>
      <tags>
        <tag>Cloudreve</tag>
        <tag>网盘程序</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Vercel部署你自己的加速服务</title>
    <url>/deploy-cdn-on-vercel.html</url>
    <content><![CDATA[<p>既然鸽鸽鸽了这么久，是时候找一篇文章出来水一水了。</p>
<p>众所周知的是Vercel可以使用反向代理这一高级功能。因此就出现了反代Github Raw，反代NPM等等一系列的神奇操作，但那种写法只能代理一个站点，这就显得很难受了。那么，有没有什么方法让其在每一个路径下分别反向代理一个网站呢?</p>
<p>当然有，只需要修改一部分写法即可。</p>
<p>首先是安装，登陆Vercel-Cli这一常规操作，下面开始。</p>
<h2 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h2><p>请及时修改<code>14.x</code>为最新版本号。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure>

<p>验证Node,Npm,Npx版本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">npx -v</span><br></pre></td></tr></table></figure>

<p>如出现版本号表明安装无误。</p>
<h2 id="安装Vercel-Cli"><a href="#安装Vercel-Cli" class="headerlink" title="安装Vercel Cli"></a>安装Vercel Cli</h2><p>请依次执行以下命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g vercel</span><br><span class="line">vercel login</span><br></pre></td></tr></table></figure>

<p>并根据提示登录Vercel账号。</p>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建一个文件夹并存放Vercel配置文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir global-cdn &amp;&amp; cd global-cdn</span><br><span class="line">vi vercel.json</span><br></pre></td></tr></table></figure>

<p>接下来我将阐述一下我的配置方法，用[DOMAIN]表示域名。</p>
<p>在[DOMAIN]&#x2F;gh&#x2F;* 下代理 Github Raw，也就是”<a href="https://raw.githubusercontent.com/&quot;%E4%B8%8B%E7%9A%84%E5%86%85%E5%AE%B9%E3%80%82">https://raw.githubusercontent.com/&quot;下的内容。</a></p>
<p>在[DOMAIN]&#x2F;npm&#x2F;* 下直接代理 Unpkg，也就是”<a href="https://unpkg.com/&quot;%E4%B8%8B%E7%9A%84%E5%86%85%E5%AE%B9%E3%80%82">https://unpkg.com/&quot;下的内容。</a></p>
<p>分别在[DOMAIN]&#x2F;wp&#x2F;theme&#x2F;* 和[DOMAIN]&#x2F;wp&#x2F;plugin&#x2F;* 下代理 Wordpress的主题和插件库，也就是”<a href="https://themes.svn.wordpress.org/&quot;%E5%92%8C&quot;https://plugins.svn.wordpress.org/&quot;%E4%B8%8B%E7%9A%84%E5%86%85%E5%AE%B9%E3%80%82">https://themes.svn.wordpress.org/&quot;和&quot;https://plugins.svn.wordpress.org/&quot;下的内容。</a></p>
<p>那么，请出今天的主角<code>vercel.json</code>。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;GCDN&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;routes&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;src&quot;</span><span class="punctuation">:</span><span class="string">&quot;/gh/(.*)&quot;</span><span class="punctuation">,</span><span class="attr">&quot;dest&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://raw.githubusercontent.com/$1&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;src&quot;</span><span class="punctuation">:</span><span class="string">&quot;/npm/(.*)&quot;</span><span class="punctuation">,</span><span class="attr">&quot;dest&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://unpkg.com/$1&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;src&quot;</span><span class="punctuation">:</span><span class="string">&quot;/wp/theme/(.*)&quot;</span><span class="punctuation">,</span><span class="attr">&quot;dest&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://themes.svn.wordpress.org/$1&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;src&quot;</span><span class="punctuation">:</span><span class="string">&quot;/wp/plugin/(.*)&quot;</span><span class="punctuation">,</span><span class="attr">&quot;dest&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://plugins.svn.wordpress.org/$1&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>然后按照其他大佬写的教程，直接输入:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vercel -A vercel.json --prod</span><br></pre></td></tr></table></figure>

<p>你会察觉现在已经无法部署单文件了，会报以下内容错误。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user supplied a possible target for deployment                                 Error: Support for single file deployments has been removed.</span><br></pre></td></tr></table></figure>

<p>解决方法很简单，修改命令为:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vercel d</span><br></pre></td></tr></table></figure>

<p>然后，熟悉的界面出来了，填写你的项目名称以及一些杂项即可完成部署。</p>
<p>当然，你需要在Vercel自定义你的域名，因为<code>vercel.app</code>这一域名已经在中国大陆被污染了，所以需要修改你的域名，使中国大陆用户继续使用该CDN。</p>
<p>你同样可以通过修改配置中路径和URL添加你自己想加速度网站，这样你就变相相当于拥有了一个速度不赖的CDN。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>Vercel为个人开发者提供了宝贵的资源，请大家千万不要滥用！</p>
]]></content>
      <categories>
        <category>技术教程</category>
        <category>网页提速</category>
      </categories>
      <tags>
        <tag>免费CDN</tag>
        <tag>Vercel</tag>
        <tag>Github加速</tag>
        <tag>Npm加速</tag>
        <tag>Wordpress加速</tag>
        <tag>自建CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>FallSoft公益CDN使用手册</title>
    <url>/fallsoft-cdn.html</url>
    <content><![CDATA[<p>现在国内的Github&#x2F;Unpkg&#x2F;WordPress访问状况，是让每个开发者和站长们都难受的情况，这些站点的访问速度并不快，导致很多个人博客&#x2F;论坛等访问速度十分缓慢。</p>
<p>为此，FallSoft为大家提供了两套CDN服务，它们为加速而生。它们都可以免费提供给草根站长和开发者使用。</p>
<h2 id="使用声明"><a href="#使用声明" class="headerlink" title="使用声明"></a>使用声明</h2><p>1.CDN服务仅仅服务于个人开发者和个人站长，如果您的企业想要使用该服务，我们建议您放弃这个念头，因为我们也无法完全保证CDN的SLA。<br>2.CDN是一个被刷取流量的重灾区域，我们既然拿出了免费的诚意，那么也请大家切勿对CDN进行任何攻击测试。因为我们相信，人人都会是善良的。<br>3.我们会尽力保证CDN的SLA，但是我们也无法保证100%的正常运行时间，所以当我们无法向提供加速服务之时，请谅解并保持合理的心态，谢谢！<br>4.在主要为中国大陆提供的CDN中，为避免滥用，我们采用白名单模式，您需要向我们提交申请，同时该CDN严禁上传或缓存违反中国大陆法律的违规文件。<br>5.在主要为中国境外提供的CDN中，我们使用了Cloudflare的CDN,您需要遵守Github&#x2F;Unpkg&#x2F;WordPress&#x2F;Cloudflare的规定上传文件。<br>6.我们随时有可能终止服务。</p>
<h2 id="主要面向中国大陆的CDN"><a href="#主要面向中国大陆的CDN" class="headerlink" title="主要面向中国大陆的CDN"></a>主要面向中国大陆的CDN</h2><p>首先，您应该向”<a href="mailto:&#x69;&#64;&#x6c;&#x75;&#111;&#x78;&#x69;&#x6e;&#46;&#x6c;&#111;&#118;&#x65;">&#x69;&#64;&#x6c;&#x75;&#111;&#x78;&#x69;&#x6e;&#46;&#x6c;&#111;&#118;&#x65;</a>“，该邮箱申请白名单仓库。<br>要求:<br>○ 单文件大小小于或等于8MB<br>○ 单仓库&#x2F;软件包大小小于或等于200MB<br>○ 不得上传违反中国大陆法律的内容</p>
<p>我们对该套CDN进行了比较好的优化，我们在中国大陆地区使用了较好的CDN，在中国境外我们使用了Cloudflare和Gcore组合的CDN以保障全球访问速度。</p>
<p>我们使用了开源项目<a href="https://github.com/AH-Dark/Anchor">AH-Dark&#x2F;Anchor</a>对三种服务进行加速。您可以通过以下的方式调用你的仓库&#x2F;软件包&#x2F;WP主题:</p>
<h3 id="Github仓库"><a href="#Github仓库" class="headerlink" title="Github仓库"></a>Github仓库</h3><p>Proxy From: <a href="https://raw.githubusercontent.com/">https://raw.githubusercontent.com</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cdn.fallsoft.cn/gh/&lt;user&gt;/&lt;repo&gt;/&lt;version&gt;/&lt;path&gt;</span><br></pre></td></tr></table></figure>

<h3 id="NPM软件包"><a href="#NPM软件包" class="headerlink" title="NPM软件包"></a>NPM软件包</h3><p>Proxy From:<br><a href="https://unpkg.com/">https://unpkg.com</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cdn.fallsoft.cn/npm/@&lt;user&gt;/&lt;package&gt;@&lt;version&gt;/&lt;path&gt;</span><br><span class="line"></span><br><span class="line">### No version</span><br><span class="line">https://cdn.fallsoft.cn/npm/@&lt;user&gt;/&lt;package&gt;/&lt;path&gt;</span><br><span class="line"># equal to</span><br><span class="line">https://cdn.fallsoft.cn/npm/@&lt;user&gt;/&lt;package&gt;@latest/&lt;path&gt;</span><br><span class="line"></span><br><span class="line">### Standard package</span><br><span class="line">https://cdn.fallsoft.cn/npm/&lt;package&gt;@&lt;version&gt;/&lt;path&gt;</span><br><span class="line"></span><br><span class="line">### No path</span><br><span class="line">https://cdn.fallsoft.cn/npm/&lt;package&gt;@&lt;version&gt;</span><br><span class="line"># will be redirected to</span><br><span class="line">https://cdn.fallsoft.cn/npm/@&lt;user&gt;/&lt;package&gt;@&lt;version&gt;/&lt;path&gt; # main file</span><br></pre></td></tr></table></figure>

<h3 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h3><p>Theme Proxy From: <a href="https://themes.svn.wordpress.org/">https://themes.svn.wordpress.org/</a><br>Plugin Proxy From: <a href="https://plugins.svn.wordpress.org/">https://plugins.svn.wordpress.org/</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># For themes in wordpress.org</span><br><span class="line">https://cdn.fallsoft.cn/wp/theme/&lt;name&gt;/&lt;version&gt;/&lt;path&gt;</span><br><span class="line"></span><br><span class="line"># For plugins in wordpress.org</span><br><span class="line">https://cdn.fallsoft.cn/wp/plugin/&lt;name&gt;/&lt;version&gt;/&lt;path&gt;</span><br></pre></td></tr></table></figure>

<h2 id="主要面向中国境外的CDN"><a href="#主要面向中国境外的CDN" class="headerlink" title="主要面向中国境外的CDN"></a>主要面向中国境外的CDN</h2><p>这套CDN是完全公开的，所有人的仓库和软件包都被允许加速，无需申请，其使用Cloudflare路由将文件通过Workers缓存到边缘网络，获得较好的速度。</p>
<p>其用法与境内的相同，但其直接分别Proxy了Github Raw&#x2F;Unpkg&#x2F;WordPress。</p>
<h3 id="Github仓库-1"><a href="#Github仓库-1" class="headerlink" title="Github仓库"></a>Github仓库</h3><p>Proxy From: <a href="https://raw.githubusercontent.com/">https://raw.githubusercontent.com</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cdn.iloli.icu/gh/&lt;user&gt;/&lt;repo&gt;/&lt;version&gt;/&lt;path&gt;</span><br></pre></td></tr></table></figure>

<h3 id="NPM软件包-1"><a href="#NPM软件包-1" class="headerlink" title="NPM软件包"></a>NPM软件包</h3><p>Proxy From:<br><a href="https://unpkg.com/">https://unpkg.com</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### Full</span><br><span class="line">https://cdn.iloli.icu/npm/@&lt;user&gt;/&lt;package&gt;@&lt;version&gt;/&lt;path&gt;</span><br><span class="line"></span><br><span class="line">### No version</span><br><span class="line">https://cdn.iloli.icu/npm/@&lt;user&gt;/&lt;package&gt;/&lt;path&gt;</span><br><span class="line"># equal to</span><br><span class="line">https://cdn.iloli.icu/npm/@&lt;user&gt;/&lt;package&gt;@latest/&lt;path&gt;</span><br><span class="line"></span><br><span class="line">### Standard package</span><br><span class="line">https://cdn.iloli.icu/npm/&lt;package&gt;@&lt;version&gt;/&lt;path&gt;</span><br><span class="line"></span><br><span class="line">### No path</span><br><span class="line">https://cdn.iloli.icu/npm/&lt;package&gt;@&lt;version&gt;</span><br><span class="line"># will be redirected to</span><br><span class="line">https://cdn.iloli.icu/npm/@&lt;user&gt;/&lt;package&gt;@&lt;version&gt;/&lt;path&gt; # main file</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="WordPress-1"><a href="#WordPress-1" class="headerlink" title="WordPress"></a>WordPress</h3><p>Theme Proxy From: <a href="https://themes.svn.wordpress.org/">https://themes.svn.wordpress.org/</a><br>Plugin Proxy From: <a href="https://plugins.svn.wordpress.org/">https://plugins.svn.wordpress.org/</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># For themes in wordpress.org</span><br><span class="line">https://cdn.iloli.icu/wp/theme/&lt;name&gt;/&lt;version&gt;/&lt;path&gt;</span><br><span class="line"></span><br><span class="line"># For plugins in wordpress.org</span><br><span class="line">https://cdn.iloli.icu/wp/plugin/&lt;name&gt;/&lt;version&gt;/&lt;path&gt;</span><br></pre></td></tr></table></figure>

<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>我们不需要很多人来使用该CDN，因为我们也不想被盗刷流量，如果你和我有矛盾，你可以冲我个人来，但是请不要刷取这样一个免费公益的CDN。又或者如果你需要稳定的CDN需求，你可以去看看CDN大厂，最近几年的CDN也都是白菜价。</p>
]]></content>
      <categories>
        <category>免费资源</category>
      </categories>
      <tags>
        <tag>Github加速</tag>
        <tag>自建CDN</tag>
        <tag>CDNJS加速</tag>
        <tag>NPM加速</tag>
        <tag>Anchor</tag>
      </tags>
  </entry>
  <entry>
    <title>Github速度太慢?5种方法让速度起飞!</title>
    <url>/github-speed-up.html</url>
    <content><![CDATA[<p>由于伟大的GFW，世界上最大的同性交友网站——Github在中国大陆地区的访问速度很慢，有没有什么简单且无需TZ的方法来快速访问Github呢？(明知故问😏😏)</p>
<h2 id="KGithub镜像"><a href="#KGithub镜像" class="headerlink" title="KGithub镜像"></a>KGithub镜像</h2><p>Kgithub是一个支持Github登陆的镜像，允许在线修改代码，但不允许注册。</p>
<p>使用起来很方便，你只需要在github.com前面加个K就行了。</p>
<p>类似将:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/facebook/react</span><br></pre></td></tr></table></figure>

<p>改为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://kgithub.com/facebook/react</span><br></pre></td></tr></table></figure>

<h2 id="Fastgit-镜像"><a href="#Fastgit-镜像" class="headerlink" title="Fastgit 镜像"></a>Fastgit 镜像</h2><p>Fastgit是一个快速方便的Github镜像，你只需要对访问的Github地址进行修改，便可以启用Fastgit.</p>
<p>镜像地址:hub.fastgit.xyz</p>
<p>类似将</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/facebook/react</span><br></pre></td></tr></table></figure>

<p>改为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://hub.fastgit.xyz/facebook/react</span><br></pre></td></tr></table></figure>

<p>使用起来很方便😁😁</p>
<p>同样，这也是 <code>Git Clone</code>的地址。</p>
<h2 id="文件加速·ghproxy"><a href="#文件加速·ghproxy" class="headerlink" title="文件加速·ghproxy"></a>文件加速·ghproxy</h2><p>你只需要打开<a href="https://ghproxy.com/">https://ghproxy.com/</a><br>输入你的文件地址，就可以加速文件的下载。</p>
<p>或者使用下面这样的形式加速:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://ghproxy.com/&#123;Github_File_URL&#125;</span><br></pre></td></tr></table></figure>

<p>你还可以安装这样使用 <code>Git Clone</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://ghproxy.com/https://github.com/facebook/react</span><br></pre></td></tr></table></figure>

<p>注意: 请不要滥用加速!</p>
<h2 id="Jsdelivr-加速"><a href="#Jsdelivr-加速" class="headerlink" title="Jsdelivr 加速"></a>Jsdelivr 加速</h2><p>虽说Jsdelivr的CDN主域名 <code>cdn.jsdelivr.net</code>已被DNS污染，也就是被墙，但是各CDN节点的域名暂未被墙，所以你可以使用Jsdelivr的Fastly节点:</p>
<p>例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://fastly.jsdelivr.net/gh/facebook/react/</span><br></pre></td></tr></table></figure>

<p>或者使用其他节点:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Gcore: gcore.jsdelivr.net</span><br><span class="line">CloudFlare：test1.jsdelivr.net</span><br><span class="line">CloudFlare：testingcf.jsdelivr.net</span><br></pre></td></tr></table></figure>

<h2 id="修改Host-x2F-DNS加速"><a href="#修改Host-x2F-DNS加速" class="headerlink" title="修改Host&#x2F;DNS加速"></a>修改Host&#x2F;DNS加速</h2><p><code>521xueweihan/GitHub520</code>是一个github加速项目，你只需要修改Host即可加速Github。</p>
<p>Host文件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># GitHub520 Host Start</span><br><span class="line">140.82.113.26                 alive.github.com</span><br><span class="line">140.82.114.25                 live.github.com</span><br><span class="line">185.199.108.154               github.githubassets.com</span><br><span class="line">140.82.113.21                 central.github.com</span><br><span class="line">185.199.108.133               desktop.githubusercontent.com</span><br><span class="line">185.199.108.153               assets-cdn.github.com</span><br><span class="line">185.199.108.133               camo.githubusercontent.com</span><br><span class="line">185.199.108.133               github.map.fastly.net</span><br><span class="line">199.232.69.194                github.global.ssl.fastly.net</span><br><span class="line">140.82.112.4                  gist.github.com</span><br><span class="line">185.199.108.153               github.io</span><br><span class="line">140.82.112.4                  github.com</span><br><span class="line">192.0.66.2                    github.blog</span><br><span class="line">140.82.113.5                  api.github.com</span><br><span class="line">185.199.108.133               raw.githubusercontent.com</span><br><span class="line">185.199.108.133               user-images.githubusercontent.com</span><br><span class="line">185.199.108.133               favicons.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars5.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars4.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars3.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars2.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars1.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars0.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars.githubusercontent.com</span><br><span class="line">140.82.113.10                 codeload.github.com</span><br><span class="line">52.216.30.76                  github-cloud.s3.amazonaws.com</span><br><span class="line">52.217.110.172                github-com.s3.amazonaws.com</span><br><span class="line">52.217.139.33                 github-production-release-asset-2e65be.s3.amazonaws.com</span><br><span class="line">52.216.140.204                github-production-user-asset-6210df.s3.amazonaws.com</span><br><span class="line">52.217.138.33                 github-production-repository-file-5c1aeb.s3.amazonaws.com</span><br><span class="line">185.199.108.153               githubstatus.com</span><br><span class="line">64.71.144.211                 github.community</span><br><span class="line">23.100.27.125                 github.dev</span><br><span class="line">140.82.114.21                 collector.github.com</span><br><span class="line">13.107.42.16                  pipelines.actions.githubusercontent.com</span><br><span class="line">185.199.108.133               media.githubusercontent.com</span><br><span class="line">185.199.108.133               cloud.githubusercontent.com</span><br><span class="line">185.199.108.133               objects.githubusercontent.com</span><br><span class="line">13.107.213.51                 vscode.dev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Update time: 2022-07-02T11:17:56+08:00</span><br><span class="line"># Update url: https://raw.hellogithub.com/hosts</span><br><span class="line"># Star me: https://github.com/521xueweihan/GitHub520</span><br><span class="line"># GitHub520 Host End</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当然，手机&#x2F;Linux如果没有Root权限，IOS没有越狱的话是无法修改Host文件的，这里介绍一个比较好的方法——使用 <code>Dnspod Public Dns</code>进行自定义解析。</p>
<p>1.打开<a href="https://console.dnspod.cn/publicdns/config">Dnspod公共解析控制台</a></p>
<p>2.开通免费版公共解析。</p>
<p>3.选择自定义解析，按照以下图片添加:<img src="https://alpha-q3.sourcegcdn.com/2022/07/27/V1DsqdbL.png/webp" alt="添加解析" loading="lazy"></p>
<p>安卓9.0以上手机使用找到【设置】【网络和互联网】 【高级】 【私人 DNS】，选择“私人 DNS 提供商主机名”选项，输入 你的 <code>DNS over TLS</code>地址 然后点击保存即可。</p>
<p>安卓9.0以下手机，请下载<a href="https://down.18bit.cn/app/Intra_v1.3.4.apk">Intra</a>，并在设置中填入你的 <code>DNS over HTTPS</code>地址，连接即可。</p>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>Github加速</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Vercel快速部署静态HEXO博客</title>
    <url>/hexo-easy-deploy.html</url>
    <content><![CDATA[<p>如标题所示，我们来使用Vercel快速构建HEXO博客并且安装butterfly主题。</p>
<h1 id="Vercel部署Hexo"><a href="#Vercel部署Hexo" class="headerlink" title="Vercel部署Hexo"></a>Vercel部署Hexo</h1><p>1.首先打开Vercel的官网<a href="https://vercel.com/" title="https://vercel.com">https://vercel.com</a>,自行选择登录或者注册账号。(可能需要手机号验证)<br>2.点击New project来创建一个新项目，然后连接到GitHub授权登录，向下选择Browse All Templates 浏览全部模板。选择HEXO模板，然后点击Create创建一个Github仓库。<img src="https://alpha-q3.sourcegcdn.com/2022/01/19/ykU9.jpg" loading="lazy">随后即可自动创建Hexo博客，可以点击visit查看博客部署。</p>
<h1 id="Hexo更换主题"><a href="#Hexo更换主题" class="headerlink" title="Hexo更换主题"></a>Hexo更换主题</h1><p>1.找到一个服务器或者安卓手机的termux，随便进入一个目录，输入以下命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>2.安装Git。请参考这一篇文章:<a href="https://www.cnblogs.com/wulixia/p/11016684.html" title="https://www.cnblogs.com/wulixia/p/11016684.html">https://www.cnblogs.com/wulixia/p/11016684.html</a><br>3.通过ssh链接仓库。请自行生成ssh秘钥链接，相关操作自行操作这里不再赘述。<br>4.找到刚刚Vercel创建的仓库，手机请切换到电脑版ua，点击Code，选择ssh，复制该链接。<br><img src="https://alpha-q3.sourcegcdn.com/2022/01/19/yokY.jpg" loading="lazy"><br>5.继续在服务器&#x2F;termux中输入(不包括尖括号):</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone &lt;你刚刚复制的链接&gt;</span><br></pre></td></tr></table></figure>

<p>6.然后输入:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd &lt;你的仓库名称&gt;</span><br><span class="line">cd ./themes/</span><br></pre></td></tr></table></figure>

<p>7.下载主题，这里以butterfly主题为例子:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>

<p>8.完成后返回仓库目录，输入:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure>

<p>9.将文件中的themes内容改为butterfly:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">themes: butterfly</span><br></pre></td></tr></table></figure>

<p>10.按Shfit加两个大写的Z保存编辑，然后直接输入:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -am &quot;666&quot;</span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure>

<p>11.打开网页，你已经发现主题改变了。相关主题配置请参考<a href="https://butterfly.js.org/" title="butterfly主题官网">butterfly主题官网</a></p>
]]></content>
      <categories>
        <category>静态部署</category>
      </categories>
      <tags>
        <tag>Vercel</tag>
        <tag>HEXO</tag>
        <tag>静态博客</tag>
      </tags>
  </entry>
  <entry>
    <title>免费白嫖Onedrive及Office365</title>
    <url>/microsoft-office-free.html</url>
    <content><![CDATA[<p>Microsoft为开发者提供了免费的E5订阅，这些订阅可以帮助我们白嫖到免费的onedrive 5t空间以及正版的office365。</p>
<h2 id="注册Microsoft365开发者计划"><a href="#注册Microsoft365开发者计划" class="headerlink" title="注册Microsoft365开发者计划"></a>注册Microsoft365开发者计划</h2><p>1.打开百度搜索Microsoft365开发者计划或者直接打开<a href="https://developer.microsoft.com/zh-cn/microsoft-365/dev-program" title="https://developer.microsoft.com/zh-cn/microsoft-365/dev-program">https://developer.microsoft.com/zh-cn/microsoft-365/dev-program</a>，点击右上角登录&#x2F;注册。(注册过程不再复述)<br><a href="https://alpha-q2.sourcegcdn.com/2022/01/03/pTdI.jpg" title="注册Microsoft账号"><img src="https://alpha-q2.sourcegcdn.com/2022/01/03/pTdI.jpg" alt="注册Microsoft账号" title="注册Microsoft账号" loading="lazy"></a><br>2.接下来填写信息并设置E5订阅。(信息可随意填写，验证手机号码时请全球上网)。<br>(这Part懒得讲，不会去评论区问)<br>3.若屏幕上出现剩余天数即表示成功。<br><a href="https://alpha-q3.sourcegcdn.com/2022/01/03/pdvt.jpg" title="e5"><img src="https://alpha-q3.sourcegcdn.com/2022/01/03/pdvt.jpg" alt="e5" title="e5" loading="lazy"></a><br>4.打开<a href="https://www.office.com/" title="https://www.office.com/">https://www.office.com/</a>使用刚刚填写信息时的创建的账号登录，然后点击“管理”，你就可以在这里添加账号了，并且修改你的onedrive空间。<br><a href="https://alpha-q2.sourcegcdn.com/2022/01/03/pfZ3.jpg" title="管理"><img src="https://alpha-q2.sourcegcdn.com/2022/01/03/pfZ3.jpg" alt="管理" title="管理" loading="lazy"></a></p>
<h2 id="续期"><a href="#续期" class="headerlink" title="续期"></a>续期</h2><p>在上面我提到了如何获取Microsoft365的免费E5订阅，接下来我来讲讲该如何续期。<br>1.打开Microsoft Azure控制台:<a href="https://portal.azure.com/#home" title="https://portal.azure.com/#home">https://portal.azure.com/#home</a>，点击查看Azure Active Directory[<img src="https://alpha-q3.sourcegcdn.com/2022/04/13/qhwhp3wP.jpeg/webp" alt="查看" title="查看" loading="lazy"><br>2.添加一个应用程序，名称随意，类型选择第二个，重定向地址请填写:<code>https://e5.qyi.io/outlook/auth2/receive</code><br><img src="https://alpha-q3.sourcegcdn.com/2022/04/13/aDaDNdAv.jpg/webp" alt="应用程序1" loading="lazy"><br><img src="https://alpha-q3.sourcegcdn.com/2022/04/13/NurMdWbU.jpg/webp" alt="应用程序2" title="应用程序2" loading="lazy"><br><img src="https://alpha-q3.sourcegcdn.com/2022/04/13/aQTOQwV9.jpg/webp%22%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F3%22" alt="应用程序3" loading="lazy"><br>3.记得保存应用程序ID。创建客户端密码，名称随意，日期最多选择24个月，创建后请保存”值”的内容。</p>
<p><img src="https://alpha-q3.sourcegcdn.com/2022/04/13/ZoFuuI65.jpg" alt="2022/04/13/ZoFuuI65.jpg" loading="lazy"><br><a href="https://alpha-q3.sourcegcdn.com/2022/04/13/8v59W9US.jpg/webp" title="密码2">密码2</a><br>4.创建以下API权限，并使用管理员账户同意。<br><code>Mail.Read</code><br><code>Mail.ReadBasic</code><br><code>Mail.ReadBasic.All</code><br><code>Mail.ReadWrite</code><br><img src="https://alpha-q3.sourcegcdn.com/2022/04/13/I0VbBNdo.jpg/webp" alt="api" title="api" loading="lazy"></p>
<p><img src="https://alpha-q3.sourcegcdn.com/2022/04/13/3Fkym20v.jpg/webp" alt="api2" title="api2" loading="lazy"><br>5.配置自动续期<br>打开<a href="https://e5.qyi.io/" title="E5续订">https://e5.qyi.io/</a>，使用Github登录，并新建一个，按照指示填写你的应用程序ID和客户端密码即可。<br>调用时间说明:<br>30-60,代表在30秒-60秒之间随机调用一次<br>点击去授权，即可完成配置。(请使用同一域下的子账号)</p>
<p>之后如果你收到微软发送的<code>续期邮件</code>即表明续期成功。</p>
]]></content>
      <categories>
        <category>免费资源</category>
      </categories>
      <tags>
        <tag>Microsoft</tag>
        <tag>Onedrive</tag>
        <tag>Office</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建Onedrive目录程序Onemanager-PHP</title>
    <url>/onemanager-php-deploy.html</url>
    <content><![CDATA[<p>大家在使用onedrive的时候十分不方便，网页版和手机版体验都不太好。那么有没有方法更轻松的使用onedrive呢?<br>那么今天，我们就来搭建一个onedrive的网盘程序。<br>首先打开这个项目地址:  <a href="https://github.com/qkqpttgf/OneManager-php">https://github.com/qkqpttgf/OneManager-php</a><br>，接着这里提供了很多种部署方式，我这里介绍两种简单方法。</p>
<h1 id="部署到Vercel"><a href="#部署到Vercel" class="headerlink" title="部署到Vercel"></a>部署到Vercel</h1><p>部署到Vercel的方式十分简单。<br>1.首先打开<a href="https://scfonedrive.github.io/Vercel/Deploy.html">https://scfonedrive.github.io/Vercel/Deploy.html</a>，按照提示下载zip文件并上传(可以使用网页翻译)</p>
<p><img src="https://q3.a1pic.cn/2022/01/03/pCyT.jpg" alt="image" loading="lazy"><br>2.点击创建token，在vercel中创建好token后填入其中。<br>3.点击deploy即可。</p>
<h1 id="部署到Heroku"><a href="#部署到Heroku" class="headerlink" title="部署到Heroku"></a>部署到Heroku</h1><p>1.首先打开<a href="https://heroku.com/">https://heroku.com</a>,注册好账号。(有谷歌验证，需要科学上网)<br>2.fork作者的GitHub仓库。<br>3.在Heroku中选择Create APP，并选择你刚刚fork的仓库，点击”deploy”即可完成部署。<br>4.cloudflare反向代理:<br>在workers中添加以下内容:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Hosts Array</span></span><br><span class="line"><span class="comment">// 服务器数组</span></span><br><span class="line"><span class="keyword">const</span> H = [</span><br><span class="line">    <span class="string">&#x27;https://换成你的Heroku应用名称.herokuapp.com/&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://onemanager.glitch.me/&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://onemanager-php.vercel.app&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// View Type</span></span><br><span class="line"><span class="comment">// 1 , only first host,</span></span><br><span class="line"><span class="comment">//     只第一条Host记录有用</span></span><br><span class="line"><span class="comment">// 2 , view top 2 host as odd/even days,</span></span><br><span class="line"><span class="comment">//     只有前两条记录有效，分别单双日运行</span></span><br><span class="line"><span class="comment">// 3 , view random host</span></span><br><span class="line"><span class="comment">//     所有记录随机访问</span></span><br><span class="line"><span class="keyword">const</span> T = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CF proxy all, true/false</span></span><br><span class="line"><span class="comment">// 一切给CF代理，true或false</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CFproxy</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Used in cloudflare workers</span></span><br><span class="line"><span class="comment">// // // // // //</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;fetch&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> url=<span class="keyword">new</span> <span class="title function_">URL</span>(event.<span class="property">request</span>.<span class="property">url</span>);</span><br><span class="line">    <span class="keyword">if</span> (url.<span class="property">protocol</span> == <span class="string">&#x27;http:&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// force HTTPS</span></span><br><span class="line">        url.<span class="property">protocol</span> = <span class="string">&#x27;https:&#x27;</span></span><br><span class="line">        event.<span class="title function_">respondWith</span>( <span class="title class_">Response</span>.<span class="title function_">redirect</span>(url.<span class="property">href</span>) )</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> host = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (T===<span class="number">1</span>) &#123;</span><br><span class="line">            host = H[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (T===<span class="number">2</span>) &#123;</span><br><span class="line">            host = H[<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getDate</span>()%<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (T===<span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> n = H.<span class="property">length</span>;</span><br><span class="line">            host = H[<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*n*<span class="number">10</span>)%n];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//console.log(host)</span></span><br><span class="line">        <span class="keyword">if</span> (host.<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">7</span>)!=<span class="string">&#x27;http://&#x27;</span>&amp;&amp;host.<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">8</span>)!=<span class="string">&#x27;https://&#x27;</span>) host = <span class="string">&#x27;http://&#x27;</span> + host;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> response = <span class="title function_">fetchAndApply</span>(host, event.<span class="property">request</span>);</span><br><span class="line"></span><br><span class="line">        event.<span class="title function_">respondWith</span>( response );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchAndApply</span>(<span class="params">host, request</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> f_url = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>);</span><br><span class="line">    <span class="keyword">let</span> a_url = <span class="keyword">new</span> <span class="title function_">URL</span>(host);</span><br><span class="line">    <span class="keyword">let</span> replace_path = a_url.<span class="property">pathname</span>;</span><br><span class="line">    <span class="keyword">if</span> (replace_path.<span class="title function_">substr</span>(replace_path.<span class="property">length</span>-<span class="number">1</span>)!=<span class="string">&#x27;/&#x27;</span>) replace_path += <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> replaced_path = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> query = f_url.<span class="property">search</span>;</span><br><span class="line">    <span class="keyword">let</span> path = f_url.<span class="property">pathname</span>;</span><br><span class="line">    <span class="keyword">if</span> (host.<span class="title function_">substr</span>(host.<span class="property">length</span>-<span class="number">1</span>)==<span class="string">&#x27;/&#x27;</span>) path = path.<span class="title function_">substr</span>(<span class="number">1</span>);</span><br><span class="line">    f_url.<span class="property">href</span> = host + path + query;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> response = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">CFproxy</span>) &#123;</span><br><span class="line">        response = <span class="keyword">await</span> <span class="title function_">fetch</span>(f_url, request);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> method = request.<span class="property">method</span>;</span><br><span class="line">        <span class="keyword">let</span> body = request.<span class="property">body</span>;</span><br><span class="line">        <span class="keyword">let</span> request_headers = request.<span class="property">headers</span>;</span><br><span class="line">        <span class="keyword">let</span> new_request_headers = <span class="keyword">new</span> <span class="title class_">Headers</span>(request_headers);</span><br><span class="line">        new_request_headers.<span class="title function_">set</span>(<span class="string">&#x27;Host&#x27;</span>, f_url.<span class="property">host</span>);</span><br><span class="line">        new_request_headers.<span class="title function_">set</span>(<span class="string">&#x27;Referer&#x27;</span>, request.<span class="property">url</span>);</span><br><span class="line">        response = <span class="keyword">await</span> <span class="title function_">fetch</span>(f_url.<span class="property">href</span>, &#123;</span><br><span class="line">            <span class="comment">/*cf: &#123;</span></span><br><span class="line"><span class="comment">                cacheEverything: true,</span></span><br><span class="line"><span class="comment">                cacheTtl: 1000,</span></span><br><span class="line"><span class="comment">                mirage: true,</span></span><br><span class="line"><span class="comment">                polish: &quot;on&quot;,</span></span><br><span class="line"><span class="comment">                minify: &#123;</span></span><br><span class="line"><span class="comment">                    javascript: true,</span></span><br><span class="line"><span class="comment">                    css: true,</span></span><br><span class="line"><span class="comment">                    html: true,</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;,*/</span></span><br><span class="line">            <span class="attr">method</span>: method,</span><br><span class="line">            <span class="attr">body</span>: body,</span><br><span class="line">            <span class="attr">headers</span>: new_request_headers</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> out_headers = <span class="keyword">new</span> <span class="title class_">Headers</span>(response.<span class="property">headers</span>);</span><br><span class="line">    <span class="keyword">if</span> (out_headers.<span class="title function_">get</span>(<span class="string">&#x27;Content-Disposition&#x27;</span>)==<span class="string">&#x27;attachment&#x27;</span>) out_headers.<span class="title function_">delete</span>(<span class="string">&#x27;Content-Disposition&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> out_body = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> contentType = out_headers.<span class="title function_">get</span>(<span class="string">&#x27;Content-Type&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (contentType.<span class="title function_">includes</span>(<span class="string">&quot;application/text&quot;</span>)) &#123;</span><br><span class="line">        out_body = <span class="keyword">await</span> response.<span class="title function_">text</span>();</span><br><span class="line">        <span class="keyword">while</span> (replace_path!=<span class="string">&#x27;/&#x27;</span>&amp;&amp;out_body.<span class="title function_">includes</span>(replace_path)) out_body = out_body.<span class="title function_">replace</span>(replace_path, replaced_path);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (contentType.<span class="title function_">includes</span>(<span class="string">&quot;text/html&quot;</span>)) &#123;</span><br><span class="line">        <span class="comment">//f_url.href + </span></span><br><span class="line">        out_body = <span class="keyword">await</span> response.<span class="title function_">text</span>();</span><br><span class="line">        <span class="keyword">while</span> (replace_path!=<span class="string">&#x27;/&#x27;</span>&amp;&amp;out_body.<span class="title function_">includes</span>(replace_path)) out_body = out_body.<span class="title function_">replace</span>(replace_path, replaced_path);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        out_body = <span class="keyword">await</span> response.<span class="property">body</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> out_response = <span class="keyword">new</span> <span class="title class_">Response</span>(out_body, &#123;</span><br><span class="line">        <span class="attr">status</span>: response.<span class="property">status</span>,</span><br><span class="line">        <span class="attr">headers</span>: out_headers</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out_response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>源文件地址:<a href="https://cdn.jsdelivr.net/gh/qkqpttgf/OneManager-php/CFWorkers_rand.js">https://cdn.jsdelivr.net/gh/qkqpttgf/OneManager-php/CFWorkers_rand.js</a></p>
]]></content>
      <categories>
        <category>网盘程序</category>
      </categories>
      <tags>
        <tag>Vercel</tag>
        <tag>Onedrive</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>使用纯Ipv4设备连接Only-Ipv6服务器</title>
    <url>/only-ipv6.html</url>
    <content><![CDATA[<p>之前白嫖了一个Euserv的免费IPv6服务器，但由于本机没有IPv6所以无法连接，但通过一些奇妙的方式我们可以通过纯IPv4去访问它。</p>
<h2 id="使用隧道连接到服务器"><a href="#使用隧道连接到服务器" class="headerlink" title="使用隧道连接到服务器"></a>使用隧道连接到服务器</h2><p>这里我们需要使用到Hax的IPv6转化。首先打开<a href="https://hax.co.id/">https://hax.co.id</a>,使用telegram注册账号。<br>首先打开telegram，关注官方TG Bot(@HaxTG_bot)，然后向机器人发送&#x2F;getid或&#x2F;start。<br>此时复制上机器人给你的TG Id，在<code>register</code>页面输入，此时机器人会发送一个验证码，输入验证码，然后输入你要自定义的密码完成注册。<br>点击<code>login</code>登录，Hax也是一家免费Ipv6服务器提供商，但本次我们利用一下它的IPv6隧道。<br>点击<code>Create vps</code>，可以自己选择，这里我并不使用该vps，所以就随意填写。<br>点击<code>IPv6 to IPv4</code>，按照以下方式填写。<br><img src="https://alpha-q3.sourcegcdn.com/2022/02/19/9Xn39Ovq.JPG" alt="IMG_20220219_115638.JPG" loading="lazy"><br>接下来即可通过IP:端口ssh连接到服务器。</p>
<h2 id="拓展IPv4"><a href="#拓展IPv4" class="headerlink" title="拓展IPv4"></a>拓展IPv4</h2><p>首先添加dns64</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -e &quot;nameserver 2001:67c:2b0::4\nnameserver 2001:67c:2b0::6&quot; &gt; /etc/resolv.conf</span><br></pre></td></tr></table></figure>

<p>然后安装warp，为vps拓展出内网IPv4地址。<br>有多个warp可供使用，按照自己喜好选择。</p>
<h3 id="P3TERX"><a href="#P3TERX" class="headerlink" title="P3TERX"></a>P3TERX</h3><p>使用以下命令打开菜单。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -fsSL git.io/warp.sh) menu</span><br></pre></td></tr></table></figure>

<p>选3，<code>自动配置 WARP WireGuard IPv4网络</code>。</p>
<h3 id="fscarmen"><a href="#fscarmen" class="headerlink" title="fscarmen"></a>fscarmen</h3><p>使用以下命令打开菜单。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -N https://cdn.jsdelivr.net/gh/fscarmen/warp/menu.sh &amp;&amp; bash menu.sh</span><br></pre></td></tr></table></figure>

<p>选4，<code>为 IPv6 Only VPS 启用 IPv4</code>。</p>
<h2 id="使用内网穿透22端口"><a href="#使用内网穿透22端口" class="headerlink" title="使用内网穿透22端口"></a>使用内网穿透22端口</h2><p>这里推荐使用Openfrp，高性能免费免实名的内网穿透服务。<br>官网:<a href="https://www.openfrp.net/">https://www.openfrp.net</a><br>注册登录后即可添加隧道。<br>按照如下进行配置:<br>节点可以自行选择。<br>隧道名称随意填写。<br>隧道类型选择<code>TCP隧道</code>。<br>本机地址填写<code>127.0.0.1</code>。<br>本地端口填写你的ssh端口，一般是<code>22</code>。<br>远程端口按照规则仔细填写。</p>
<h2 id="本机实现内网穿透"><a href="#本机实现内网穿透" class="headerlink" title="本机实现内网穿透"></a>本机实现内网穿透</h2><p>按照架构下载相关软件。vps一般是AMD64。<br>在shell命令行中输入:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://down.openfrp.net/client/frpc_linux_amd64.zip</span><br><span class="line">unzip frpc_linux_amd64.zip</span><br><span class="line">mv frpc_linux_amd64 frpc</span><br><span class="line">cd frpc</span><br></pre></td></tr></table></figure>

<p>在官网控制台中选择配置文件，复制配置文件。<br>然后添加一个<code>frpc.ini</code>文件:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi frpc.ini</span><br></pre></td></tr></table></figure>

<p>将配置文件内容复制进去。<br>输入<code>./frpc</code>进行测试，如果出现<code>successful</code>即为成功。</p>
<h2 id="添加进程守护"><a href="#添加进程守护" class="headerlink" title="添加进程守护"></a>添加进程守护</h2><p>输入:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup ./frpc &amp;</span><br></pre></td></tr></table></figure>

<h2 id="验证连接"><a href="#验证连接" class="headerlink" title="验证连接"></a>验证连接</h2><p>更换连接地址为frp给的域名，端口为自己设的端口。</p>
<p>本篇教程参考来自:<br><a href="https://blog.iamsjy.com/2022/01/30/enable-ipv6-only-vps-to-access-ipv4-network/">Tony’s Blog:使 IPv6 Only VPS 能访问 IPv4 网络</a><br><a href="https://blog.csdn.net/weixin_44823747/article/details/105414284">LingMessy:frp安装和使用</a></p>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>Ipv6</tag>
        <tag>Ipv4</tag>
        <tag>隧道</tag>
        <tag>内网穿透</tag>
        <tag>Warp</tag>
        <tag>Euserv</tag>
      </tags>
  </entry>
  <entry>
    <title>Termux安卓5/6版本的可用镜像源</title>
    <url>/termux-old.html</url>
    <content><![CDATA[<p>感谢<a href="https://iamsjy.com/">Tony</a>对镜像源的整理与同步。</p>
<h2 id="复活镜像"><a href="#复活镜像" class="headerlink" title="复活镜像"></a>复活镜像</h2><p>你以为TUNA取消了对OSDN的同步就完了吗？我当然要复活镜像。</p>
<p>既然国内没了，那国外呢？</p>
<p>随后找到了一个国外的镜像站<a href="https://ftp.halifax.rwth-aachen.de/">ftp.halifax.rwth-aachen.de</a></p>
<p><img src="https://alpha-q3.sourcegcdn.com/2022/08/22/ORrOIh0E.png" alt="https://ftp.halifax.rwth-aachen.de/" loading="lazy"></p>
<p>但国外的镜像站，通常在国内的速度不足，所以，我采取了Cloudflare Workers反代的方式，将该网站路由至Cloudflare全球网络。</p>
<p>使用的Workers代码:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 镜像站点</span></span><br><span class="line"><span class="keyword">const</span> upstream = <span class="string">&#x27;ftp.halifax.rwth-aachen.de&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 手机端镜像站点</span></span><br><span class="line"><span class="keyword">const</span> upstream_mobile = <span class="string">&#x27;ftp.halifax.rwth-aachen.de&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 禁止国家访问</span></span><br><span class="line"><span class="keyword">const</span> blocked_region = [<span class="string">&#x27;JP&#x27;</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 禁止自访问</span></span><br><span class="line"><span class="keyword">const</span> blocked_ip_address = [<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 替换成你想镜像的站点</span></span><br><span class="line"><span class="keyword">const</span> replace_dict = &#123;</span><br><span class="line">    <span class="string">&#x27;$upstream&#x27;</span>: <span class="string">&#x27;$custom_domain&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;//ftp.halifax.rwth-aachen.de&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//以下内容都不用动</span></span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;fetch&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    event.<span class="title function_">respondWith</span>(<span class="title function_">fetchAndApply</span>(event.<span class="property">request</span>));</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchAndApply</span>(<span class="params">request</span>) &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">const</span> region = request.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&#x27;cf-ipcountry&#x27;</span>).<span class="title function_">toUpperCase</span>();</span><br><span class="line">    <span class="keyword">const</span> ip_address = request.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&#x27;cf-connecting-ip&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> user_agent = request.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&#x27;user-agent&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">let</span> response = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>);</span><br><span class="line">    <span class="keyword">let</span> url_host = url.<span class="property">host</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (url.<span class="property">protocol</span> == <span class="string">&#x27;http:&#x27;</span>) &#123;</span><br><span class="line">        url.<span class="property">protocol</span> = <span class="string">&#x27;https:&#x27;</span></span><br><span class="line">        response = <span class="title class_">Response</span>.<span class="title function_">redirect</span>(url.<span class="property">href</span>);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">await</span> <span class="title function_">device_status</span>(user_agent)) &#123;</span><br><span class="line">        upstream_domain = upstream</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        upstream_domain = upstream_mobile</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    url.<span class="property">host</span> = upstream_domain;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (blocked_region.<span class="title function_">includes</span>(region)) &#123;</span><br><span class="line">        response = <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">&#x27;Access denied: WorkersProxy is not available in your region yet.&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="number">403</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(blocked_ip_address.<span class="title function_">includes</span>(ip_address))&#123;</span><br><span class="line">        response = <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">&#x27;Access denied: Your IP address is blocked by WorkersProxy.&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="number">403</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> method = request.<span class="property">method</span>;</span><br><span class="line">        <span class="keyword">let</span> request_headers = request.<span class="property">headers</span>;</span><br><span class="line">        <span class="keyword">let</span> new_request_headers = <span class="keyword">new</span> <span class="title class_">Headers</span>(request_headers);</span><br><span class="line"> </span><br><span class="line">        new_request_headers.<span class="title function_">set</span>(<span class="string">&#x27;Host&#x27;</span>, upstream_domain);</span><br><span class="line">        new_request_headers.<span class="title function_">set</span>(<span class="string">&#x27;Referer&#x27;</span>, url.<span class="property">href</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">let</span> original_response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url.<span class="property">href</span>, &#123;</span><br><span class="line">            <span class="attr">method</span>: method,</span><br><span class="line">            <span class="attr">headers</span>: new_request_headers</span><br><span class="line">        &#125;)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">let</span> original_response_clone = original_response.<span class="title function_">clone</span>();</span><br><span class="line">        <span class="keyword">let</span> original_text = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">let</span> response_headers = original_response.<span class="property">headers</span>;</span><br><span class="line">        <span class="keyword">let</span> new_response_headers = <span class="keyword">new</span> <span class="title class_">Headers</span>(response_headers);</span><br><span class="line">        <span class="keyword">let</span> status = original_response.<span class="property">status</span>;</span><br><span class="line"> </span><br><span class="line">        new_response_headers.<span class="title function_">set</span>(<span class="string">&#x27;access-control-allow-origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">        new_response_headers.<span class="title function_">set</span>(<span class="string">&#x27;access-control-allow-credentials&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">        new_response_headers.<span class="title function_">delete</span>(<span class="string">&#x27;content-security-policy&#x27;</span>);</span><br><span class="line">        new_response_headers.<span class="title function_">delete</span>(<span class="string">&#x27;content-security-policy-report-only&#x27;</span>);</span><br><span class="line">        new_response_headers.<span class="title function_">delete</span>(<span class="string">&#x27;clear-site-data&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">const</span> content_type = new_response_headers.<span class="title function_">get</span>(<span class="string">&#x27;content-type&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (content_type.<span class="title function_">includes</span>(<span class="string">&#x27;text/html&#x27;</span>) &amp;&amp; content_type.<span class="title function_">includes</span>(<span class="string">&#x27;UTF-8&#x27;</span>)) &#123;</span><br><span class="line">            original_text = <span class="keyword">await</span> <span class="title function_">replace_response_text</span>(original_response_clone, upstream_domain, url_host);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            original_text = original_response_clone.<span class="property">body</span></span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        response = <span class="keyword">new</span> <span class="title class_">Response</span>(original_text, &#123;</span><br><span class="line">            status,</span><br><span class="line">            <span class="attr">headers</span>: new_response_headers</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">replace_response_text</span>(<span class="params">response, upstream_domain, host_name</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> text = <span class="keyword">await</span> response.<span class="title function_">text</span>()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> replace_dict) &#123;</span><br><span class="line">        j = replace_dict[i]</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="string">&#x27;$upstream&#x27;</span>) &#123;</span><br><span class="line">            i = upstream_domain</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;$custom_domain&#x27;</span>) &#123;</span><br><span class="line">            i = host_name</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (j == <span class="string">&#x27;$upstream&#x27;</span>) &#123;</span><br><span class="line">            j = upstream_domain</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="string">&#x27;$custom_domain&#x27;</span>) &#123;</span><br><span class="line">            j = host_name</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">let</span> re = <span class="keyword">new</span> <span class="title class_">RegExp</span>(i, <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">        text = text.<span class="title function_">replace</span>(re, j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">device_status</span> (user_agent_info) &#123;</span><br><span class="line">    <span class="keyword">var</span> agents = [<span class="string">&quot;Android&quot;</span>, <span class="string">&quot;iPhone&quot;</span>, <span class="string">&quot;SymbianOS&quot;</span>, <span class="string">&quot;Windows Phone&quot;</span>, <span class="string">&quot;iPad&quot;</span>, <span class="string">&quot;iPod&quot;</span>];</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> v = <span class="number">0</span>; v &lt; agents.<span class="property">length</span>; v++) &#123; <span class="keyword">if</span> (user_agent_info.<span class="title function_">indexOf</span>(agents[v]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并且使用在我前面提到的<a href="https://blog.inkdust.top/cloudflare-cname.html">Cloudflare自定义官方CNAME接入</a>教程中，自定义了IP.</p>
<p>所以，你可以使用<code>www.zihu.me</code>这一域名来继续开心的在旧手机上使用TERMUX.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;deb https://www.zihu.me/osdn/storage/g/t/te/termux-old/termux-packages stable main&quot; &gt; $PREFIX/etc/apt/sources.list</span><br><span class="line">echo &quot;deb https://www.zihu.me/osdn/storage/g/t/te/termux-old/science-packages-21 science stable&quot; &gt;&gt; $PREFIX/etc/apt/sources.list</span><br><span class="line">echo &quot;deb https://www.zihu.me/osdn/storage/g/t/te/termux-old/game-packages-21 games stable&quot; &gt;&gt; $PREFIX/etc/apt/sources.list</span><br><span class="line">echo &quot;deb https://www.zihu.me/osdn/storage/g/t/te/termux-old/unstable-packages-21 unstable main&quot; &gt;&gt; $PREFIX/etc/apt/sources.list</span><br><span class="line">echo &quot;deb https://www.zihu.me/osdn/storage/g/t/te/termux-old/x11-packages-21 x11 main&quot; &gt;&gt; $PREFIX/etc/apt/sources.list</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当然，如果你是在Cloudflare网络下较慢的情况下，例如<code>电信</code>。你可以直接使用<code>ftp.halifax.rwth-aachen.de</code></p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>由于Tuna取消了对OSDN的同步，其下游仓库也已同步取消。所以在国内的镜像源几乎无法使用。包括下面的所有镜像。</p>
<h2 id="使用一键换源脚本-需安装Python"><a href="#使用一键换源脚本-需安装Python" class="headerlink" title="使用一键换源脚本(需安装Python)"></a>使用一键换源脚本(需安装Python)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wget https://blog.iamsjy.com/scripts/termux-old.py &amp;&amp; python3 termux-old.py</span><br></pre></td></tr></table></figure>

<h2 id="更换至清华源-清华大学开源软件镜像站"><a href="#更换至清华源-清华大学开源软件镜像站" class="headerlink" title="更换至清华源(清华大学开源软件镜像站)"></a>更换至清华源(清华大学开源软件镜像站)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;deb https://mirrors.tuna.tsinghua.edu.cn/osdn/storage/g/t/te/termux-old/termux-packages stable main&quot; &gt; $PREFIX/etc/apt/sources.list</span><br><span class="line">echo &quot;deb https://mirrors.tuna.tsinghua.edu.cn/osdn/storage/g/t/te/termux-old/science-packages-21 science stable&quot; &gt;&gt; $PREFIX/etc/apt/sources.list</span><br><span class="line">echo &quot;deb https://mirrors.tuna.tsinghua.edu.cn/osdn/storage/g/t/te/termux-old/game-packages-21 games stable&quot; &gt;&gt; $PREFIX/etc/apt/sources.list</span><br><span class="line">echo &quot;deb https://mirrors.tuna.tsinghua.edu.cn/osdn/storage/g/t/te/termux-old/unstable-packages-21 unstable main&quot; &gt;&gt; $PREFIX/etc/apt/sources.list</span><br><span class="line">echo &quot;deb https://mirrors.tuna.tsinghua.edu.cn/osdn/storage/g/t/te/termux-old/x11-packages-21 x11 main&quot; &gt;&gt; $PREFIX/etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<h2 id="更换至北外源-北京外国语大学开源软件镜像站"><a href="#更换至北外源-北京外国语大学开源软件镜像站" class="headerlink" title="更换至北外源(北京外国语大学开源软件镜像站)"></a>更换至北外源(北京外国语大学开源软件镜像站)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;deb https://mirrors.bfsu.edu.cn/osdn/storage/g/t/te/termux-old/termux-packages stable main&quot; &gt; $PREFIX/etc/apt/sources.list </span><br><span class="line">echo &quot;deb https://mirrors.bfsu.edu.cn/osdn/storage/g/t/te/termux-old/science-packages-21 science stable&quot; &gt;&gt; $PREFIX/etc/apt/sources.list </span><br><span class="line">echo &quot;deb https://mirrors.bfsu.edu.cn/osdn/storage/g/t/te/termux-old/game-packages-21 games stable&quot; &gt;&gt; $PREFIX/etc/apt/sources.list </span><br><span class="line">echo &quot;deb https://mirrors.bfsu.edu.cn/osdn/storage/g/t/te/termux-old/unstable-packages-21 unstable main&quot; &gt;&gt; $PREFIX/etc/apt/sources.list </span><br><span class="line">echo &quot;deb https://mirrors.bfsu.edu.cn/osdn/storage/g/t/te/termux-old/x11-packages-21 x11 main&quot; &gt;&gt; $PREFIX/etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<h2 id="更换至ISCAS源-ISRC-ISCAS-开源镜像站"><a href="#更换至ISCAS源-ISRC-ISCAS-开源镜像站" class="headerlink" title="更换至ISCAS源(ISRC-ISCAS 开源镜像站)"></a>更换至ISCAS源(ISRC-ISCAS 开源镜像站)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;deb https://mirror.iscas.ac.cn/osdn/storage/g/t/te/termux-old/termux-packages stable main&quot; &gt; $PREFIX/etc/apt/sources.list </span><br><span class="line">echo &quot;deb https://mirror.iscas.ac.cn/osdn/storage/g/t/te/termux-old/science-packages-21 science stable&quot; &gt;&gt; $PREFIX/etc/apt/sources.list </span><br><span class="line">echo &quot;deb https://mirror.iscas.ac.cn/osdn/storage/g/t/te/termux-old/game-packages-21 games stable&quot; &gt;&gt; $PREFIX/etc/apt/sources.list </span><br><span class="line">echo &quot;deb https://mirror.iscas.ac.cn/osdn/storage/g/t/te/termux-old/unstable-packages-21 unstable main&quot; &gt;&gt; $PREFIX/etc/apt/sources.list </span><br><span class="line">echo &quot;deb https://mirror.iscas.ac.cn/osdn/storage/g/t/te/termux-old/x11-packages-21 x11 main&quot; &gt;&gt; $PREFIX/etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<h2 id="更换至南京源-南京大学开源镜像站"><a href="#更换至南京源-南京大学开源镜像站" class="headerlink" title="更换至南京源(南京大学开源镜像站)"></a>更换至南京源(南京大学开源镜像站)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;deb https://mirror.nju.edu.cn/osdn/storage/g/t/te/termux-old/termux-packages stable main&quot; &gt; $PREFIX/etc/apt/sources.list </span><br><span class="line">echo &quot;deb https://mirror.nju.edu.cn/osdn/storage/g/t/te/termux-old/science-packages-21 science stable&quot; &gt;&gt; $PREFIX/etc/apt/sources.list </span><br><span class="line">echo &quot;deb https://mirror.nju.edu.cn/osdn/storage/g/t/te/termux-old/game-packages-21 games stable&quot; &gt;&gt; $PREFIX/etc/apt/sources.list </span><br><span class="line">echo &quot;deb https://mirror.nju.edu.cn/osdn/storage/g/t/te/termux-old/unstable-packages-21 unstable main&quot; &gt;&gt; $PREFIX/etc/apt/sources.list </span><br><span class="line">echo &quot;deb https://mirror.nju.edu.cn/osdn/storage/g/t/te/termux-old/x11-packages-21 x11 main&quot; &gt;&gt; $PREFIX/etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>更换后需删除science.list 和 game.list:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm $PREFIX/etc/apt/sources.list.d/*</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>Termux</tag>
        <tag>镜像源</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Qoddi构建免费的Typecho博客</title>
    <url>/typecho-qoddi.html</url>
    <content><![CDATA[<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>该教程已失效，Qoddi增加了较为严格的验证。</p>
<p>这几天我正在研究Qoddi，在官方文档中我发现了Qoddi竟然可以部署PHP，随即我就开始了部署，经过我的一顿乱按，成功的在Qoddi上部署了Typecho。为了大家部署方便我放在了我的GitHub上。下面开始部署。<br>1.首先打开<a href="https://qoddi.com/" title="qoddi官网">Qoddi官网</a>,注册账号(需要美国手机号码验证，可以使用接码平台，实测可过)。<br>2.注册后会自动打开控制台，点击右上角+号，点击<code>New App</code>，按照以下方式填写(名称、区域可自定义)。<br><img src="https://alpha-q3.sourcegcdn.com/2022/01/22/0tb3.jpg" loading="lazy"><br>3.部署源码请使用自定义GitHub地址，请输入:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git@github.com:myupup123/typecho-qoddi.git</span><br></pre></td></tr></table></figure>

<p><img src="https://alpha-q3.sourcegcdn.com/2022/01/22/0xB1.png" loading="lazy"><br>4.点击deploy完成部署，等待3-5分钟。<br>5.部署完成后找到域名，点击打开。<br><img src="https://alpha-q3.sourcegcdn.com/2022/01/22/0V5b.png" loading="lazy"><br>6.按照部署Typecho的方式部署，数据库账号、密码、名称均在刚刚控制台的<code>Environment Variables</code>给出。<br><img src="https://alpha-q3.sourcegcdn.com/2022/01/22/07Os.jpg" loading="lazy"><br>7.你已经完成Typecho部署了，我自带了一个很好看的Joe主题，如果需要其他主题，你可以直接Fork我的GitHub仓库，然后使用Git上传主题或插件，你也可以把一些常用主题或插件提交到我的pr中方便大家使用。<br>该项目地址:<a href="https://github.com/myupup123/typecho-qoddi" title="https://github.com/myupup123/typecho-qoddi">https://github.com/myupup123/typecho-qoddi</a></p>
]]></content>
      <categories>
        <category>网站部署</category>
      </categories>
      <tags>
        <tag>Qoddi</tag>
        <tag>Typecho</tag>
        <tag>免费</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress博客的多种部署方式</title>
    <url>/wordpress-delopy.html</url>
    <content><![CDATA[<p>今天来总结一下几种WordPress博客的部署方式。不说废话，直接开始!</p>
<h2 id="部署到服务器-x2F-VPS"><a href="#部署到服务器-x2F-VPS" class="headerlink" title="部署到服务器&#x2F;VPS"></a>部署到服务器&#x2F;VPS</h2><p>这里有几种常见的部署方式。</p>
<h3 id="使用Oneinstack部署"><a href="#使用Oneinstack部署" class="headerlink" title="使用Oneinstack部署"></a>使用Oneinstack部署</h3><p>首先确保服务器没有安装任何PHP和数据库环境。</p>
<p>然后使用一键安装命令安装<code>Oneinstack</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo wget -c http://mirrors.linuxeye.com/oneinstack-full.tar.gz &amp;&amp; tar xzf oneinstack-full.tar.gz &amp;&amp; ./oneinstack/install.sh --nginx_option 1 --php_option 9 --phpcache_option 1 --phpmyadmin  --db_option 2 --dbinstallmethod 1 --dbrootpwd jtrof057 --node  --pureftpd  --redis  --memcached  --iptables  --reboot</span><br></pre></td></tr></table></figure>

<p>安装可能需要<code>1~3</code>个小时，请耐心等待。</p>
<p>安装完成后目录里会多出一个<code>oneinstack文件夹</code></p>
<p>进入文件夹并开始创建虚拟主机。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd oneinstack &amp;&amp; sudo ./vhost.sh</span><br></pre></td></tr></table></figure>

<p>按照以下参考以此配置HTTPS,域名,网站根目录,防盗链,伪静态。</p>
<p>这里为了测试方便并不开启HTTPS和防盗链，但是在正式环境中应该开启。</p>
<p><img src="https://alpha-q3.sourcegcdn.com/2022/04/03/UMqEq5mS.jpg" alt="IMG_20220403_141613.jpg" loading="lazy"></p>
<p>然后进入你设置的网站根目录下载WordPress文件。</p>
<p>在网站根目录下执行:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo wget https://cn.wordpress.org/latest-zh_CN.zip &amp;&amp; sudo apt install unzip &amp;&amp; sudo unzip latest-zh_CN.zip &amp;&amp; sudo mv -r ./wordpress/* ./</span><br></pre></td></tr></table></figure>

<p>接着添加数据库。</p>
<p>首先查看数据库密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/oneinstack </span><br><span class="line">sudo grep dbrootpwd options.conf</span><br></pre></td></tr></table></figure>

<p><code>dbrootpwd</code>项后的值即为你的MySQL数据库root用户的密码</p>
<p>然后使用<code>公网IP:80</code>进入<code>oneinstack管理页面</code>,然后进入<code>PhpMyAdmin</code>,使用用户名<code>root</code>,刚刚查看的密码登录。</p>
<p>在终端控制台输入:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> wordpress@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;yourpassword&#x27;</span></span><br></pre></td></tr></table></figure>

<p>创建一个名为<code>wordpress</code>,密码为<code>yourpassword</code>的账户,账户账号和密码可以自行输入。</p>
<p>随后创建一个名为<code>wordpress</code>的数据库,并授权,数据库名称可自定。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database wordpress</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grant all privileges on wordpress.* to wordpress@&#x27;%&#x27; with grant option</span><br></pre></td></tr></table></figure>

<p>然后进入网站根目录进行授权:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /data/wwwroot</span><br><span class="line">sudo chown -R www test.seanhui.ml</span><br><span class="line">sudo chmod -R 777 test.seanhui.ml</span><br></pre></td></tr></table></figure>

<p>最后重启<code>NGINX</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl reload nginx</span><br></pre></td></tr></table></figure>

<p>打开网站就可以安装你的WordPress博客了，按照数据库账号,密码完成安装。</p>
<p>以上部署方法参考自:</p>
<p><a href="https://www.budcreate.com/463.htm">萌芽创想:在 OneinStack 上安装 WordPress</a></p>
<h3 id="使用Docker部署"><a href="#使用Docker部署" class="headerlink" title="使用Docker部署"></a>使用Docker部署</h3><h4 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h4><h5 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h5><p>为了方便，推荐使用官方脚本安装。此脚本适用于常用 Linux 发行版。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | sudo sh</span><br></pre></td></tr></table></figure>

<p>默认情况下，Docker 只能通过 root 用户运行，普通用户通常要加<code>sudo</code>。如果觉得麻烦，可以启用 Docker 的 rootless 模式。使用普通用户执行下面这条命令即可安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dockerd-rootless-setuptool.sh install</span><br></pre></td></tr></table></figure>

<h5 id="安装-Docker-Compose"><a href="#安装-Docker-Compose" class="headerlink" title="安装 Docker Compose"></a>安装 Docker Compose</h5><p>下载二进制文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>赋予执行权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h4 id="设置容器"><a href="#设置容器" class="headerlink" title="设置容器"></a>设置容器</h4><h5 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h5><p>1.新建项目目录，这里以<code>~/my_wordpress</code>为例。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ~/my_wordpress</span><br></pre></td></tr></table></figure>

<p>2.进入项目目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/my_wordpress</span><br></pre></td></tr></table></figure>

<p>3.编辑配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nano docker-compose.yml</span><br></pre></td></tr></table></figure>

<p>文件内容:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db_data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">somewordpress</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line"> </span><br><span class="line">  <span class="attr">wordpress:</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wordpress:latest</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">wordpress_data:/var/www/html</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;443:443&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_HOST:</span> <span class="string">db</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_USER:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_NAME:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db_data:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">wordpress_data:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>注意:</p>
<p>这里用到了 <code>mysql:5.7</code> 和 <code>wordpress:latest</code> 两个 Docker 镜像，WordPress 镜像依赖于 <code>MySQL</code>镜像。</p>
<p><code>restart: always</code> 参数表明容器服务宕机后会自动重启。</p>
<p><code>MYSQL_ROOT_PASSWORD </code>为数据库的 root 密码，<code>MYSQL_PASSWORD</code> 为数据库的普通用户密码，请自行修改，对应的 <code>WORDPRESS_DB_PASSWORD</code> 也要同时修改。<code>MYSQL_USER</code> 为数据库普通用户的用户名，如果有需要也可以修改，对应的 <code>WORDPRESS_DB_USER</code> 也要同时修改。</p>
<p><code>80:80</code> 的意思是把宿主机的 80 端口映射到容器内部的 80 端口。如需通过其他端口访问，只需修改前面的 80。比如，我要通过 8080 端口访问 WordPress，填写 <code>8080:80</code>即可。</p>
<p>执行 <code>Ctrl + O </code>保存文件，回车，再执行 <code>Ctrl + X</code> 退出。</p>
<h5 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h5><p>在 <code>~/my_wordpress</code>目录中执行以下命令启动 WordPress：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>构建完成后就可以通过 <code>http://ip:port </code>来访问 WordPress（请将ip替换为 VPS 的 IP，<code>port</code> 替换为你使用的端口，如果是 80 端口则可以省略）。如果提示<code>Error establishing a database connection</code>，说明配置尚未完成，等待 1～2 分钟，刷新网页即可进入安装界面。</p>
<h5 id="配置SSL"><a href="#配置SSL" class="headerlink" title="配置SSL"></a>配置SSL</h5><p>进入容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker-compose exec wordpress bash</span><br></pre></td></tr></table></figure>

<p><code>注意：本章中后续命令都要在容器中执行！</code></p>
<p>安装 cron 及 nano</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt update &amp;&amp; apt install -y cron nano</span><br></pre></td></tr></table></figure>

<p>安装 acme.sh 用于签发 SSL 证书（请把 <a href="mailto:&#109;&#121;&#64;&#x65;&#120;&#x61;&#x6d;&#x70;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#109;">&#109;&#121;&#64;&#x65;&#120;&#x61;&#x6d;&#x70;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#109;</a> 改为你的邮件地址）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl  https://get.acme.sh | sh -s email=my@example.com</span><br></pre></td></tr></table></figure>

<p>将域名解析至 VPS 的 IP，然后执行以下命令签发证书（请把 example.com 改为你的域名）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash ~/.acme.sh/acme.sh --issue -d example.com --apache  --tlsport 56789</span><br></pre></td></tr></table></figure>

<p>启用模块</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a2enmod rewrite</span><br><span class="line">a2enmod ssl</span><br></pre></td></tr></table></figure>

<p>创建证书目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/apache2/ssl</span><br></pre></td></tr></table></figure>

<p>复制证书（请把<code>example.com</code> 改为你的域名1</p>
<p>创建站点（将以下全部内容粘贴进终端 )</p>
<p>启用站点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a2ensite wordpress</span><br><span class="line">service apache2 restart</span><br></pre></td></tr></table></figure>

<p>编辑 <code>/var/www/html/.htaccess</code>，在顶部加入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># BEGIN SSL Redirect</span><br><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">RewriteEngine on</span><br><span class="line">RewriteCond %&#123;HTTPS&#125; !=on [NC]</span><br><span class="line">RewriteRule ^(.*)$ https://%&#123;HTTP_HOST&#125;/$1 [R=301,L]</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"># END SSL Redirect</span><br></pre></td></tr></table></figure>

<p>最后一步，访问域名，进入 WordPress 后台，打开 「设置」-「常规选项」，并把 <strong>WordPress地址</strong> 和 <strong>站点地址</strong> 中的 <code>http</code> 改为 <code>https</code>，并保存。</p>
<p>至此，SSL 配置已完成。</p>
<p>该部署方法转载自</p>
<p><a href="https://blog.iamsjy.com/2022/03/29/deploy-wordpress-with-docker-compose/">Tony’s Blog:通过 Docker Compose 部署 WordPress</a></p>
<p><code>遵循CC BY-NC-SA 4.0开源协议进行转载，已获原作者授权</code></p>
]]></content>
      <categories>
        <category>建站教程</category>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>Wordpress</tag>
        <tag>Docker部署,</tag>
        <tag>宝塔部署,</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
</search>
